/**
 * DCSA OpenAPI specification for Booking v2 - Beta 1
 * API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the *** [Information Model v2022.1]() *** Will be updated soon ***. This API does not define the business rules regarding what is allowed to update at what time. For this the [BKG IFS]() *** Will be updated soon *** should be consulted.  All other documents related to the Booking publication can be found [here](https://knowledge.dcsa.org/s/publication?publicationId=a0r7T000000L8mmQAC)  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v2/events  in order to poll event information.  It is recomended to implement the [DCSA Documentation Event Hub](https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB) in order to use the push model. Here events are pushed as they occur.  For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/bkg/v2#v200B1). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments. 
 *
 * The version of the OpenAPI document: 2.0.0-Beta-1
 * Contact: info@dcsa.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { References1Inner } from './references1Inner';
import { ShipmentEventTypeCode } from './shipmentEventTypeCode';
import { DocumentTypeCode } from './documentTypeCode';
import { RelatedDocumentReferencesInner } from './relatedDocumentReferencesInner';


/**
 * The business attributes related to the `ShipmentEvent`.  This is a conditional object - if `retractedEventID` is **not** provided in the `metadata` then this object is mandatory 
 */
export interface ShipmentEventPayload { 
    /**
     * For `ShipmentEvents` the `eventClassifierCode` **must** be `ACT` 
     */
    eventClassifierCode: ShipmentEventPayloadEventClassifierCodeEnum;
    /**
     * The local date and time, when the event took place, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Often this is the same as eventCreatedDateTime (which is when the event is created) 
     */
    eventDateTime: any | null;
    shipmentEventTypeCode: ShipmentEventTypeCode;
    documentTypeCode: DocumentTypeCode;
    /**
     * The reference of the object defined by the `documentTypeCode` 
     */
    documentReference: string;
    /**
     * This field can be used to explain why a specific `ShipmentEvent` has been sent. 
     */
    reason?: string;
    /**
     * An optional list of key-value (`type`-`value`) pairs representing links to objects relevant to the event. The `type`-field is used to describe where the `value`-field is pointing to. 
     */
    relatedDocumentReferences?: Array<RelatedDocumentReferencesInner>;
    /**
     * References provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.  In addition to the References provided by the shipper or freight forwarder - the carrier can provide an extra `type` called `EQ` which is a reference to an Equipment. 
     */
    references?: Array<References1Inner>;
}
export enum ShipmentEventPayloadEventClassifierCodeEnum {
    ACT = 'ACT'
};



