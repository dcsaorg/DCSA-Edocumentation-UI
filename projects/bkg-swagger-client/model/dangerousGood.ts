/**
 * DCSA OpenAPI specification for Booking v2 - Beta 1
 * API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the *** [Information Model v2022.1]() *** Will be updated soon ***. This API does not define the business rules regarding what is allowed to update at what time. For this the [BKG IFS]() *** Will be updated soon *** should be consulted.  All other documents related to the Booking publication can be found [here](https://knowledge.dcsa.org/s/publication?publicationId=a0r7T000000L8mmQAC)  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v2/events  in order to poll event information.  It is recomended to implement the [DCSA Documentation Event Hub](https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB) in order to use the push model. Here events are pushed as they occur.  For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/bkg/v2#v200B1). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments. 
 *
 * OpenAPI spec version: 2.0.0-Beta-1
 * Contact: info@dcsa.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AdditionalCargoHandlingInformation } from './additionalCargoHandlingInformation';
import { CargoNetExplosiveNecContent } from './cargoNetExplosiveNecContent';
import { CargoNetExplosiveNecContentUnit } from './cargoNetExplosiveNecContentUnit';
import { CargoNetWeight } from './cargoNetWeight';
import { CargoNetWeightUnit } from './cargoNetWeightUnit';
import { CodedVariantList } from './codedVariantList';
import { ControlTemperature } from './controlTemperature';
import { DgContactDetails } from './dgContactDetails';
import { DgPacking } from './dgPacking';
import { EmergencyTemperature } from './emergencyTemperature';
import { EndOfHoldingDateTime } from './endOfHoldingDateTime';
import { FlashPoint } from './flashPoint';
import { Fumigation } from './fumigation';
import { InhalationZone } from './inhalationZone';
import { InspectionIdentifier } from './inspectionIdentifier';
import { IsCompetentAuthorityApproval } from './isCompetentAuthorityApproval';
import { IsEmptyUncleanedResidue } from './isEmptyUncleanedResidue';
import { IsExceptedQuantity } from './isExceptedQuantity';
import { IsHot } from './isHot';
import { IsInspected } from './isInspected';
import { IsLimitedQuantity } from './isLimitedQuantity';
import { IsMarinePollutants } from './isMarinePollutants';
import { IsReportableQuantity } from './isReportableQuantity';
import { IsSalvagePackings } from './isSalvagePackings';
import { IsWaste } from './isWaste';
import { Sadt } from './sadt';
import { Sapt } from './sapt';
import { SegregationGroup } from './segregationGroup';
import { SpecialCertificateNumber } from './specialCertificateNumber';
import { TemperatureUnit } from './temperatureUnit';

/**
 * Specification for Dangerous Goods 
 */
export interface DangerousGood { 
    codedVariantList?: CodedVariantList;
    isMarinePollutants?: IsMarinePollutants;
    isLimitedQuantity?: IsLimitedQuantity;
    isExceptedQuantity?: IsExceptedQuantity;
    isSalvagePackings?: IsSalvagePackings;
    isUncleanedResidue?: IsEmptyUncleanedResidue;
    isWaste?: IsWaste;
    isHot?: IsHot;
    isCompetentAuthorityApproval?: IsCompetentAuthorityApproval;
    segregationGroups?: Array<SegregationGroup>;
    cargoNetWeight?: CargoNetWeight;
    cargoNetWeightUnit?: CargoNetWeightUnit;
    cargoNetExplosiveNecContent?: CargoNetExplosiveNecContent;
    cargoNetExplosiveNecContentUnit?: CargoNetExplosiveNecContentUnit;
    outerPacking?: DgPacking;
    innerPacking?: DgPacking;
    flashPoint?: FlashPoint;
    flashPointUnit?: TemperatureUnit;
    controlTemperature?: ControlTemperature;
    controlTemperatureUnit?: TemperatureUnit;
    emergencyTemperature?: EmergencyTemperature;
    emergencyTemperatureUnit?: TemperatureUnit;
    sadt?: Sadt;
    sadtUnit?: TemperatureUnit;
    sapt?: Sapt;
    saptUnit?: TemperatureUnit;
    dgContactDetails?: DgContactDetails;
    endOfHoldingDateTime?: EndOfHoldingDateTime;
    fumigation?: Fumigation;
    isReportableQuantity?: IsReportableQuantity;
    inhalationZone?: InhalationZone;
    isInspected?: IsInspected;
    inspectionIdentifier?: InspectionIdentifier;
    specialCertificateNumber?: SpecialCertificateNumber;
    additionalCargoHandlingInformation?: AdditionalCargoHandlingInformation;
}