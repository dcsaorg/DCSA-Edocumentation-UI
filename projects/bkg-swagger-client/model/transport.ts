/**
 * DCSA OpenAPI specification for Booking v2 - Beta 1
 * API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the *** [Information Model v2022.1]() *** Will be updated soon ***. This API does not define the business rules regarding what is allowed to update at what time. For this the [BKG IFS]() *** Will be updated soon *** should be consulted.  All other documents related to the Booking publication can be found [here](https://knowledge.dcsa.org/s/publication?publicationId=a0r7T000000L8mmQAC)  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v2/events  in order to poll event information.  It is recomended to implement the [DCSA Documentation Event Hub](https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB) in order to use the push model. Here events are pushed as they occur.  For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/bkg/v2#v200B1). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments. 
 *
 * The version of the OpenAPI document: 2.0.0-Beta-1
 * Contact: info@dcsa.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { TransportLoadLocation } from './transportLoadLocation';
import { TransportDischargeLocation } from './transportDischargeLocation';
import { ModeOfTransport } from './modeOfTransport';
import { TransportPlanStage } from './transportPlanStage';


/**
 * A list of transports sorted by ShipmentTransport sequenceNumber
 */
export interface Transport { 
    transportPlanStage: TransportPlanStage;
    /**
     * Sequence number of the transport plan stage 
     */
    transportPlanStageSequenceNumber: number;
    loadLocation: TransportLoadLocation;
    dischargeLocation: TransportDischargeLocation;
    /**
     * The planned date of departure. 
     */
    plannedDepartureDate: string;
    /**
     * The planned date of arrival. 
     */
    plannedArrivalDate: string;
    modeOfTransport?: ModeOfTransport;
    /**
     * The name of the Vessel given by the Vessel Operator and registered with IMO. 
     */
    vesselName?: string;
    /**
     * The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel 
     */
    vesselIMONumber?: string;
    /**
     * The identifier of an import voyage. The vessel operator-specific identifier of the import Voyage. 
     */
    carrierImportVoyageNumber?: string;
    /**
     * A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWS]` - `2 digits` for the year - `2 alphanumeric characters` for the sequence number of the voyage - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est or `S`outh). 
     */
    universalImportVoyageReference?: string;
    /**
     * The identifier of an export voyage. The vessel operator-specific identifier of the export Voyage. 
     */
    carrierExportVoyageNumber?: string;
    /**
     * A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWS]` - `2 digits` for the year - `2 alphanumeric characters` for the sequence number of the voyage - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est or `S`outh). 
     */
    universalExportVoyageReference?: string;
    /**
     * Indicator whether mode of transportation for pre-carriage (e.g. truck, barge, rail) is under shipper\'s responsibility 
     */
    isUnderShippersResponsibility?: boolean;
}

