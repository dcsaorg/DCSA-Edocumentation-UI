/**
 * DCSA OpenAPI specification for Booking v2 - Beta 1
 * API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the *** [Information Model v2022.1]() *** Will be updated soon ***. This API does not define the business rules regarding what is allowed to update at what time. For this the [BKG IFS]() *** Will be updated soon *** should be consulted.  All other documents related to the Booking publication can be found [here](https://knowledge.dcsa.org/s/publication?publicationId=a0r7T000000L8mmQAC)  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v2/events  in order to poll event information.  It is recomended to implement the [DCSA Documentation Event Hub](https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB) in order to use the push model. Here events are pushed as they occur.  For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/bkg/v2#v200B1). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments. 
 *
 * The version of the OpenAPI document: 2.0.0-Beta-1
 * Contact: info@dcsa.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { CargoMovementTypeAtDestination } from './cargoMovementTypeAtDestination';
import { ReceiptTypeAtOrigin } from './receiptTypeAtOrigin';
import { CargoMovementTypeAtOrigin } from './cargoMovementTypeAtOrigin';
import { DeliveryTypeAtDestination } from './deliveryTypeAtDestination';


/**
 * Fields needed in both `Booking` and `TransportDocument` 
 */
export interface BookingShallowCore { 
    receiptTypeAtOrigin?: ReceiptTypeAtOrigin;
    deliveryTypeAtDestination?: DeliveryTypeAtDestination;
    cargoMovementTypeAtOrigin?: CargoMovementTypeAtOrigin;
    cargoMovementTypeAtDestination?: CargoMovementTypeAtDestination;
    /**
     * Reference number for agreement between shipper and carrier through which the shipper commits to provide a certain minimum quantity of cargo over a fixed period, and the carrier commits to a certain rate or rate schedule.
     */
    serviceContractReference?: string;
    /**
     * The name of the Vessel given by the Vessel Operator and registered with IMO. 
     */
    vesselName?: string;
    /**
     * The name of a service as specified by the carrier 
     */
    carrierServiceName?: string;
    /**
     * The Carrier specific code of the service for which the schedule details are published. 
     */
    carrierServiceCode?: string;
    /**
     * A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`. 
     */
    universalServiceReference?: string;
    /**
     * The identifier of an export voyage. The vessel operator-specific identifier of the export Voyage. 
     */
    carrierExportVoyageNumber?: string;
    /**
     * A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWS]` - `2 digits` for the year - `2 alphanumeric characters` for the sequence number of the voyage - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est or `S`outh). 
     */
    universalExportVoyageReference?: string;
    /**
     * The value of the cargo that the shipper declares to avoid the carrier&apos;s limitation of liability and \"Ad Valorem\" freight, i.e. freight which is calculated based on the value of the goods declared by the shipper.
     */
    declaredValue?: number;
    /**
     * The currency used for the declared value, using the 3-character code defined by ISO 4217.
     */
    declaredValueCurrency?: string;
}

