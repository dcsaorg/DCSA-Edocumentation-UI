/**
 * DCSA OpenAPI specification for Booking v2 - Beta 1
 * API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the *** [Information Model v2022.1]() *** Will be updated soon ***. This API does not define the business rules regarding what is allowed to update at what time. For this the [BKG IFS]() *** Will be updated soon *** should be consulted.  All other documents related to the Booking publication can be found [here](https://knowledge.dcsa.org/s/publication?publicationId=a0r7T000000L8mmQAC)  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the [DCSA Documentation Event Hub](https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB) in order to use the push model. Here events are pushed as they occur.  For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/bkg/v1#v200B1). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments. 
 *
 * OpenAPI spec version: 2.0.0-Beta-1
 * Contact: info@dcsa.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BookingDocumentStatus } from '../model/bookingDocumentStatus';
import { CarrierBookingReference } from '../model/carrierBookingReference';
import { Shipment } from '../model/shipment';
import { ShipmentSummary } from '../model/shipmentSummary';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ShipmentService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get shipments
     * Retrieves the shipment _metadata_. 
     * @param documentStatus Filter by the status of the booking. Possible values are: - RECE (Received) - PENU (Pending Update) - PENC (Pending Confirmation) - CONF (Confirmed) - REJE (Rejected) - CANC (Cancelled) - CMPL (Completed)  More details can be found on &lt;a href&#x3D;\&quot;https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv\&quot;&gt;GitHub&lt;/a&gt;. Be aware that the list linked to is the &#x60;ShipmentEventTypeCodes&#x60; which is equivalent to &#x60;documentStatus&#x60;, the list is a subset of the possible values. 
     * @param limit Maximum number of items to return. 
     * @param sort A &#x60;,&#x60; (comma) separated list of field names to define the sort order. Field names should be suffixed by a &#x60;:&#x60; (colon) followed by either the keyword &#x60;ASC&#x60; (for ascending order) or &#x60;DESC&#x60; (for descening order) to specify direction. &#x60;:ASC&#x60; may be omitted, in which case ascending order will be used. 
     * @param aPIVersion An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1ShipmentSummariesGet(documentStatus?: BookingDocumentStatus, limit?: number, sort?: string, aPIVersion?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ShipmentSummary>>;
    public v1ShipmentSummariesGet(documentStatus?: BookingDocumentStatus, limit?: number, sort?: string, aPIVersion?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ShipmentSummary>>>;
    public v1ShipmentSummariesGet(documentStatus?: BookingDocumentStatus, limit?: number, sort?: string, aPIVersion?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ShipmentSummary>>>;
    public v1ShipmentSummariesGet(documentStatus?: BookingDocumentStatus, limit?: number, sort?: string, aPIVersion?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (documentStatus !== undefined && documentStatus !== null) {
            queryParameters = queryParameters.set('documentStatus', <any>documentStatus);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;
        if (aPIVersion !== undefined && aPIVersion !== null) {
            headers = headers.set('API-Version', String(aPIVersion));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ShipmentSummary>>('get',`${this.basePath}/v1/shipment-summaries`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get shipment
     * Retrieves the shipment with the &#x60;carrierBookingReference&#x60; in the path. 
     * @param carrierBookingReference 
     * @param aPIVersion An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1ShipmentsCarrierBookingReferenceGet(carrierBookingReference: CarrierBookingReference, aPIVersion?: string, observe?: 'body', reportProgress?: boolean): Observable<Shipment>;
    public v1ShipmentsCarrierBookingReferenceGet(carrierBookingReference: CarrierBookingReference, aPIVersion?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Shipment>>;
    public v1ShipmentsCarrierBookingReferenceGet(carrierBookingReference: CarrierBookingReference, aPIVersion?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Shipment>>;
    public v1ShipmentsCarrierBookingReferenceGet(carrierBookingReference: CarrierBookingReference, aPIVersion?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (carrierBookingReference === null || carrierBookingReference === undefined) {
            throw new Error('Required parameter carrierBookingReference was null or undefined when calling v1ShipmentsCarrierBookingReferenceGet.');
        }


        let headers = this.defaultHeaders;
        if (aPIVersion !== undefined && aPIVersion !== null) {
            headers = headers.set('API-Version', String(aPIVersion));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Shipment>('get',`${this.basePath}/v1/shipments/${encodeURIComponent(String(carrierBookingReference))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
